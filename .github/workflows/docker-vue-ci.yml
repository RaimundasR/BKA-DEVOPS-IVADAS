name: Vue.js Docker Build and Deploy

on:
  push:
    branches:
      - "feature/**"
      - main
  pull_request:
    branches:
      - main
    types: [opened, reopened, ready_for_review]

jobs:
  build-development:
    runs-on: bka-devops
    timeout-minutes: 5
    if: github.event_name == 'push'  # ✅ Prevents execution on PR events
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check and Set Docker Tag
        run: |
          VERSION_FILE="/home/tenant/docker_version.txt"
          if [[ -f "$VERSION_FILE" ]]; then
            LAST_VERSION=$(cat "$VERSION_FILE" | sed 's/v//')
            NEXT_VERSION=$((LAST_VERSION + 1))
          else
            NEXT_VERSION=1
          fi
          echo "v$NEXT_VERSION" > "$VERSION_FILE"
          echo "DOCKER_TAG=v$NEXT_VERSION" >> $GITHUB_ENV
          echo "DOCKER_TAG set to v$NEXT_VERSION"

      - name: Save Docker Tag for Later Jobs
        run: echo "${{ env.DOCKER_TAG }}" > docker-tag.txt

      - name: Upload Version File
        uses: actions/upload-artifact@v4
        with:
          name: docker-tag
          path: docker-tag.txt
          retention-days: 1

      - name: Build Docker Image (Development Stage)
        run: docker buildx build --load -t my-vue-app:${{ env.DOCKER_TAG }} .

      - name: Save Docker Image as Tar
        run: docker save my-vue-app:${{ env.DOCKER_TAG }} -o my-vue-app-${{ env.DOCKER_TAG }}.tar

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: vue-docker-${{ env.DOCKER_TAG }}
          path: my-vue-app-${{ env.DOCKER_TAG }}.tar
          retention-days: 1

      - name: Cleanup Docker Cache
        run: docker system prune -af
        if: always()

  deploy-staging:
    runs-on: bka-devops
    needs: build-development
    timeout-minutes: 5
    if: github.event_name == 'pull_request'  # ✅ Runs only on PR events
    steps:
      - name: Download Docker Tag
        uses: actions/download-artifact@v4
        with:
          name: docker-tag

      - name: Set Docker Tag from File
        run: echo "DOCKER_TAG=$(cat docker-tag.txt)" >> $GITHUB_ENV

      - name: Download Built Docker Image
        uses: actions/download-artifact@v4
        with:
          name: vue-docker-${{ env.DOCKER_TAG }}

      - name: Load Docker Image
        run: docker load -i my-vue-app-${{ env.DOCKER_TAG }}.tar

      - name: Stop and Remove Old Staging Container
        run: |
          docker stop vue-staging || true
          docker rm vue-staging || true

      - name: Remove Old Staging Image
        run: |
          if docker images -q my-vue-app:${{ env.PREV_DOCKER_TAG }}; then
            docker rmi my-vue-app:${{ env.PREV_DOCKER_TAG }} || true
          fi

      - name: Run Updated Staging Container
        run: docker run -d --name vue-staging -p 8081:80 my-vue-app:${{ env.DOCKER_TAG }}

      - name: Cleanup Docker Cache
        run: docker system prune -af
        if: always()

  deploy-production:
    runs-on: bka-devops
    needs: deploy-staging
    timeout-minutes: 5
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download Docker Tag
        uses: actions/download-artifact@v4
        with:
          name: docker-tag

      - name: Set Docker Tag from File
        run: echo "DOCKER_TAG=$(cat docker-tag.txt)" >> $GITHUB_ENV

      - name: Download Built Docker Image
        uses: actions/download-artifact@v4
        with:
          name: vue-docker-${{ env.DOCKER_TAG }}

      - name: Load Docker Image
        run: docker load -i my-vue-app-${{ env.DOCKER_TAG }}.tar

      - name: Stop and Remove Old Production Container
        run: |
          docker stop vue-nginx || true
          docker rm vue-nginx || true

      - name: Remove Old Production Image
        run: |
          if docker images -q my-vue-app:${{ env.PREV_DOCKER_TAG }}; then
            docker rmi my-vue-app:${{ env.PREV_DOCKER_TAG }} || true
          fi

      - name: Run Updated Production Container
        run: docker run -d --name vue-nginx -p 8080:80 my-vue-app:${{ env.DOCKER_TAG }}

      - name: Cleanup Docker Cache
        run: docker system prune -af
        if: always()
