name: Vue.js Docker Build and Deploy

on:
  push:
    branches:
      - "feature/**"
      - main
  pull_request:
    branches:
      - main
    types: [opened, reopened, ready_for_review]

jobs:
  build-development:
    runs-on: bka-devops
    timeout-minutes: 5
    if: github.event_name == 'push'  # ✅ Runs only on push
    outputs:
      DOCKER_TAG: ${{ steps.docker_tag_step.outputs.DOCKER_TAG }}  # ✅ Pass tag to next jobs
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check and Set Docker Tag
        id: docker_tag_step  # ✅ Define an ID for reference
        run: |
          VERSION_FILE="/home/tenant/docker_version.txt"
          if [[ -f "$VERSION_FILE" ]]; then
            LAST_VERSION=$(cat "$VERSION_FILE" | sed 's/v//')
            NEXT_VERSION=$((LAST_VERSION + 1))
          else
            NEXT_VERSION=1
          fi
          echo "v$NEXT_VERSION" > "$VERSION_FILE"
          echo "DOCKER_TAG=v$NEXT_VERSION" >> $GITHUB_ENV
          echo "DOCKER_TAG=v$NEXT_VERSION" >> $GITHUB_OUTPUT  # ✅ Store for next jobs
          echo "DOCKER_TAG set to v$NEXT_VERSION"

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image to Docker Hub
        run: |
          IMAGE_NAME=your-dockerhub-username/my-vue-app
          docker buildx build --push --tag $IMAGE_NAME:${{ env.DOCKER_TAG }} --tag $IMAGE_NAME:latest .

      - name: Cleanup Docker Cache
        run: docker system prune -af
        if: always()

  deploy-staging:
    runs-on: bka-devops
    needs: build-development
    timeout-minutes: 5
    if: github.event_name == 'pull_request'  # ✅ Runs only on PR events
    steps:
      - name: Retrieve Docker Tag from Previous Run
        run: echo "DOCKER_TAG=${{ needs.build-development.outputs.DOCKER_TAG }}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull the Latest Image from Docker Hub
        run: |
          IMAGE_NAME=your-dockerhub-username/my-vue-app
          docker pull $IMAGE_NAME:${{ env.DOCKER_TAG }}

      - name: Stop and Remove Old Staging Container
        run: |
          docker stop vue-staging || true
          docker rm vue-staging || true

      - name: Run Updated Staging Container
        run: docker run -d --name vue-staging -p 8081:80 your-dockerhub-username/my-vue-app:${{ env.DOCKER_TAG }}

      - name: Cleanup Docker Cache
        run: docker system prune -af
        if: always()

  deploy-production:
    runs-on: bka-devops
    needs: deploy-staging
    timeout-minutes: 5
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Retrieve Docker Tag from Previous Run
        run: echo "DOCKER_TAG=${{ needs.build-development.outputs.DOCKER_TAG }}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull the Latest Image from Docker Hub
        run: |
          IMAGE_NAME=your-dockerhub-username/my-vue-app
          docker pull $IMAGE_NAME:${{ env.DOCKER_TAG }}

      - name: Stop and Remove Old Production Container
        run: |
          docker stop vue-nginx || true
          docker rm vue-nginx || true

      - name: Run Updated Production Container
        run: docker run -d --name vue-nginx -p 8080:80 your-dockerhub-username/my-vue-app:${{ env.DOCKER_TAG }}

      - name: Cleanup Docker Cache
        run: docker system prune -af
        if: always()
