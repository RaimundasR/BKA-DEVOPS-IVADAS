name: Vue.js Docker Build and Deploy

on:
  push:
    branches:
      - "feature/**"
      - main
  pull_request:
    branches:
      - main
    types: [opened, reopened, ready_for_review]

jobs:
  build-development:
    runs-on: bka-devops
    timeout-minutes: 5
    environment: dockerhub registry
    if: github.event_name == 'push'
    outputs:
      DOCKER_TAG: ${{ steps.docker_tag_step.outputs.DOCKER_TAG }}
    steps:
      - name: Define Docker Image Name
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "❌ ERROR: DOCKER_USERNAME is empty!" >&2
            exit 1
          fi
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/my-vue-app"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "✅ IMAGE_NAME set to: $IMAGE_NAME"

      - name: Check and Set Docker Tag
        id: docker_tag_step
        run: |
          VERSION_FILE="/home/tenant/docker_version.txt"
          if [[ -f "$VERSION_FILE" ]]; then
            LAST_VERSION=$(cat "$VERSION_FILE" | sed 's/v//')
            NEXT_VERSION=$((LAST_VERSION + 1))
          else
            NEXT_VERSION=1
          fi
          echo "v$NEXT_VERSION" > "$VERSION_FILE"
          echo "DOCKER_TAG=v$NEXT_VERSION" >> "$GITHUB_ENV"
          echo "✅ DOCKER_TAG set to: v$NEXT_VERSION"

      - name: Debug Secrets
        run: |
          echo "✅ DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"
          echo "DOCKER_PASSWORD length=$(echo -n "${{ secrets.DOCKER_PASSWORD }}" | wc -c)"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.DOCKER_TAG }},${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline

      - name: Cleanup Docker Cache
        run: docker system prune -af
        if: always()



  deploy-staging:
    runs-on: bka-devops
    needs: build-development
    timeout-minutes: 5
    environment: dockerhub registry  # ✅ Grants access to secrets
    if: github.event_name == 'pull_request'
    steps:
      - name: Retrieve Docker Tag from Previous Run
        run: echo "DOCKER_TAG=${{ needs.build-development.outputs.DOCKER_TAG }}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull the Latest Image from Docker Hub
        run: docker pull "${IMAGE_NAME}:${{ env.DOCKER_TAG }}"

      - name: Stop and Remove Old Staging Container
        run: |
          docker stop vue-staging || true
          docker rm vue-staging || true

      - name: Run Updated Staging Container
        run: docker run -d --name vue-staging -p 8081:80 "${IMAGE_NAME}:${{ env.DOCKER_TAG }}"

      - name: Cleanup Docker Cache
        run: docker system prune -af
        if: always()

  deploy-production:
    runs-on: bka-devops
    needs: deploy-staging
    timeout-minutes: 5
    environment: dockerhub registry  # ✅ Grants access to secrets
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Retrieve Docker Tag from Previous Run
        run: echo "DOCKER_TAG=${{ needs.build-development.outputs.DOCKER_TAG }}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Pull the Latest Image from Docker Hub
        run: docker pull "${IMAGE_NAME}:${{ env.DOCKER_TAG }}"

      - name: Stop and Remove Old Production Container
        run: |
          docker stop vue-nginx || true
          docker rm vue-nginx || true

      - name: Run Updated Production Container
        run: docker run -d --name vue-nginx -p 8080:80 "${IMAGE_NAME}:${{ env.DOCKER_TAG }}"

      - name: Cleanup Docker Cache
        run: docker system prune -af
        if: always()
